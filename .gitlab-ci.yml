
gitlab docker registry:
  image: docker:latest
  script: docker login registry.gitlab.com -u $GITLAB_USERNAME -p $GITLAB_TOKEN


#docker login registry.gitlab.com -u $GITLAB_USERNAME -p $GITLAB_TOKEN
#oc login $K8S_CLUSTER --token=$K8S_TOKEN --insecure-skip-tls-verify=true


#stages:
#  - foo
##  - build
##  - test
##  - package
##  - prepare
##  - deploy
##  - stop
#
#variables:
#  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
#  DOCKER_IMAGE_TAGGED: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#  DOCKER_IMAGE_LATEST: $CI_REGISTRY_IMAGE:latest
#
#cache:
#  paths:
#    - .m2/repository
#
#before_script:
#  - docker login registry.gitlab.com
#
#
#foo_bar:
#  stage: foo
#  image: docker:latest
#  script: |
#     echo $CI_COMMIT_SHA
#  tags:
#    - docker


#build_jar:
#  stage: build
#  image: maven:3-jdk-8
#  services:
#    - postgres:9.6
#  script:
#    - mvn install -DskipTests
#  artifacts:
#    paths:
#      - target/*.jar
#  tags:
#    - docker
#
#build_native_image:
#  stage: build
#  image: maven:3-jdk-8
#  script:
#    - mvn package -B -Pnative -Dquarkus.native.container-build=true -DskipTests
#  tags:
#    - docker


#integration_test1:
#  stage: test
#  image: maven:3-jdk-8
#  services:
#    - postgres:9.6
#  script:
#    - mvn test
#  tags:
#    - docker

#integration_test2:
#  stage: test
#  image: maven:3-jdk-8
#  services:
#    - postgres:9.6
#  script:
#    - mvn test
#  tags:
#    - docker

#docker_push:
#  stage: package
#  image: docker:latest
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - docker build -t $DOCKER_IMAGE_TAGGED .
#    - docker push $DOCKER_IMAGE_TAGGED
#  dependencies:
#    - build_jar
#  tags:
#    - docker
#
#docker_tag:
#  stage: prepare
#  image: docker:latest
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - docker pull $DOCKER_IMAGE_TAGGED
#    - docker tag $DOCKER_IMAGE_TAGGED $DOCKER_IMAGE_LATEST
#    - docker push $DOCKER_IMAGE_LATEST
#  tags:
#    - docker
#  only:
#    - master
#
#deploy_review:
#  stage: deploy
#  image: innoq/gitlabci-docker-compose:alpine
#  variables:
#    APP_DEPLOY_URL: $CI_ENVIRONMENT_SLUG.$APP_URL
#    # add your other vars for DEV here!
#  script:
#    - sh ./scripts/prepare-docker-compose.sh > docker-compose.yml
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - docker-compose -p $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG up -d
#  dependencies:
#    - docker_push
#  tags:
#    - docker
#  except:
#    - master
#  environment:
#    name: review/$CI_COMMIT_REF_NAME
#    url: https://$CI_ENVIRONMENT_SLUG.$APP_URL
#    on_stop: stop_review_app
#
#stop_review_app:
#  stage: stop
#  image: innoq/gitlabci-docker-compose:alpine
#  variables:
#    APP_DEPLOY_URL: $CI_ENVIRONMENT_SLUG.$APP_URL
#  script:
#    - sh ./scripts/prepare-docker-compose.sh > docker-compose.yml
#    - docker-compose -p $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG down
#  tags:
#    - docker
#  except:
#    - master
#  when: manual
#  environment:
#    name: review/$CI_COMMIT_REF_NAME
#    action: stop
#
#deploy_prod:
#  stage: deploy
#  image: innoq/gitlabci-docker-compose:alpine
#  variables:
#    APP_DEPLOY_URL: $APP_URL
#    # add your other vars for PROD here!
#  script:
#    - sh ./scripts/prepare-docker-compose.sh > docker-compose.yml
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - docker-compose -p $CI_PROJECT_NAME up -d
#  tags:
#    - docker
#  only:
#    - master
#  environment:
#    name: production
#    url: https://$APP_URL








#image: docker:git
#services:
#  - docker:dind
#variables:
#  DOCKER_DRIVER: overlay
#
#before_script:
#  - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"

#development:
#  stage: deploy
#  script:
#    - docker build -f src/main/docker/Dockerfile.native -t registry.gitlab.com/marzelwidmer/quarkus-demo-spring-kotlin .
##    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
##    - docker push "$CI_REGISTRY_IMAGE:latest"
#  only:
#    - master
#
#stable:
#  stage: deploy
#  script:
#    - docker build -t "$CI_REGISTRY_IMAGE:$(CI_BUILD_REF_NAME)" .
#    - docker push "$CI_REGISTRY_IMAGE:$(CI_BUILD_REF_NAME)"
#  only:
#    - tags

#stages:
#  - build
#
#
#maven-build:
#  image: maven:3-jdk-8
#  stage: build
#  script: |
#    ./mvnw package -B -Pnative -Dquarkus.native.container-build=true -DskipTests
#
#  artifacts:
#    paths:
#      - target/*.jar

#
#docker-build:
#  image: docker:latest
#  stage: docker
#  script:
#    - docker build -f src/main/docker/Dockerfile.native -t registry.gitlab.com/marzelwidmer/quarkus-demo-spring-kotlin .
##    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
##    - docker push "$CI_REGISTRY_IMAGE:latest"
#  only:
#    - master


#image: docker:latest
#
#services:
#  - docker:bind
#
#variables:
#  DOCKER_DRIVER: overlay
#  SPRING_PROFILES_ACTIVE: gitlab-ci
#
#stages:
#  - build
#  - package
#  - deploy
#
#maven-build:
#  image: maven:3-jdk-8
#  stage: build
#  script: |
#    ./mvnw package -B -Pnative -Dquarkus.native.container-build=true
#
#  artifacts:
#    paths:
#      - target/*.jar
#
#docker-build:
#  stage: package
#  script:
#    - docker build -f src/main/docker/Dockerfile.native -t registry.gitlab.com/marzelwidmer/quarkus-demo-spring-kotlin .
##    - docker build -t registry.gitlab.com/marcolenzo/actuator-sample .
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#    - docker push registry.gitlab.com/marzelwidmer/quarkus-demo-spring-kotlin
#    -
#k8s-deploy:
#  image: google/cloud-sdk
#  stage: deploy
#  script:
#    - echo "$GOOGLE_KEY" > key.json
#    - gcloud auth activate-service-account --key-file key.json
#    - gcloud config set compute/zone europe-west1-c
#    - gcloud config set project actuator-sample
#    - gcloud config set container/use_client_certificate True
#    - gcloud container clusters get-credentials actuator-sample
#    - kubectl delete secret registry.gitlab.com
#    - kubectl create secret docker-registry registry.gitlab.com --docker-server=https://registry.gitlab.com --docker-username=marcolenzo --docker-password=$REGISTRY_PASSWD --docker-email=lenzo.marco@gmail.com
#    - kubectl apply -f deployment.yml




#stages:
#  - build
#  - test
#  - deploy
#
#
#
#build:
#  stage: build
#  script: |
#    ./mvnw package -Pnative -Dquarkus.native.container-build=true
#
#test:
#  stage: test
#  script: |
#    oc new-app --docker-image=marzelwidmer/quarkus-quickstart-native:latest \
#    --name='quarkus-quickstart-native' \
#    -l name='quarkus-quickstart-native' \
#    -e SELECTOR=quarkus
#
#deploy to staging:
#  stage: deploy
#  script: make deploy
#  environment:
#    name: staging
#    url: https://gitlab-rubber.apps.c3smonkey.ch
#
#deploy to production:
#  stage: deploy
#  script: make deploy
#  environment:
#    name: production
#    url: https://gitlab-rubber.apps.c3smonkey.ch



#
#
#
#image: ebits/openshift-client
#
#stages:
#  - deployToOpenShift
#
#variables:
#  OPENSHIFT_SERVER: https://console.c3smonkey.ch:8443
#  OPENSHIFT_DOMAIN: apps.c3smonkey.ch
#  # Configure this variable in Secure Variables:
#  OPENSHIFT_TOKEN: $TOKEN
#
#.deploy: &deploy
#  before_script:
#    - oc login "$OPENSHIFT_SERVER" --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify
#  # login with the service account
#    - oc project "slides-openshift"
#  # enter into our slides project on OpenShift
#  script:
#    - "oc get services $APP 2> /dev/null || oc new-app . --name=$APP"
#  # create a new application from the image in the OpenShift registry
#    - "oc start-build $APP --from-dir=. --follow || sleep 3s"
#  # start a new build
#    - "oc get routes $APP 2> /dev/null || oc expose service $APP --hostname=$APP_HOST"
#  # expose our application
#
#develop:
#  <<: *deploy
#  stage: deployToOpenShift
#  tags:
#    - docker
#  variables:
#    APP: quarkus-quickstart-native
#    APP_HOST: development.$OPENSHIFT_DOMAIN
#  environment:
#    name: development
#    url: http://quarkus-quickstart-native.$OPENSHIFT_DOMAIN
#  except:
#    - master